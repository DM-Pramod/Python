def calculate_days_and_cost(row):
    pass_by = row['PassBy'].split(',')
    travel_days = sum(df2.loc[(df2['GateName'].isin(pass_by)) & ((df2['id'] == row['StartPort']) | (df2['id'] == row['EndPort'])), 'travel_Days'])
    transit_days = sum(df3.loc[(df3['startGate'].isin(pass_by)) & (df3['EndGate'].isin(pass_by)), 'TransitDays'])
    wait_days = sum(gate_attributes_df.loc[gate_attributes_df['Gate'].isin(pass_by), 'WaitDays'])
    total_cost = sum(gate_attributes_df.loc[gate_attributes_df['Gate'].isin(pass_by), 'GateCost'])
    return pd.Series([travel_days + transit_days + wait_days, total_cost])

# Apply the function
df1[['total_days', 'total_cost']] = df1.apply(calculate_days_and_cost, axis=1)



{(0, 1): {(1, 4, 1), '0->G1->G2->1', 10, 3000},
 (2, 3): {(4, 4, 6), 18, '2->G1->G2->3', 3000},
 (1, 3): {(1, 6), '1->G2->3', 2000, 7},
 (2, 0): {(5, 3), '2->G2->0', 2000, 8},
 (1, 0): {(1, 0, 1), '1->G2->G1->0', 3000, 6}}


# Define the node object
node_object = {}


{1 Discharge, 3 term_sink, 0 Load, 2 term_source}


output_list = []
for element in elements:
    if element.startswith('G'):
        output_list.append(f'{gate_counter} {element}')
        gate_counter += 1
    else:
        for node in nodes:
            if node.startswith(element):
                output_list.append(node)
                break

