def calculate_days_and_cost(row):
    pass_by = row['PassBy'].split(',')
    travel_days = sum(df2.loc[(df2['GateName'].isin(pass_by)) & ((df2['id'] == row['StartPort']) | (df2['id'] == row['EndPort'])), 'travel_Days'])
    transit_days = sum(df3.loc[(df3['startGate'].isin(pass_by)) & (df3['EndGate'].isin(pass_by)), 'TransitDays'])
    wait_days = sum(gate_attributes_df.loc[gate_attributes_df['Gate'].isin(pass_by), 'WaitDays'])
    total_cost = sum(gate_attributes_df.loc[gate_attributes_df['Gate'].isin(pass_by), 'GateCost'])
    return pd.Series([travel_days + transit_days + wait_days, total_cost])

# Apply the function
df1[['total_days', 'total_cost']] = df1.apply(calculate_days_and_cost, axis=1)



{(0, 1): {(1, 4, 1), '0->G1->G2->1', 10, 3000},
 (2, 3): {(4, 4, 6), 18, '2->G1->G2->3', 3000},
 (1, 3): {(1, 6), '1->G2->3', 2000, 7},
 (2, 0): {(5, 3), '2->G2->0', 2000, 8},
 (1, 0): {(1, 0, 1), '1->G2->G1->0', 3000, 6}}


# Define the node object
node_object = {}

# Function 1: Add gate nodes to the node object
def add_gate_node(gate):
    if gate not in node_object:
        node_object[gate] = f"Gate{gate[-1]}"
    return node_object

# Function 2: Add arcs and travel information to the arc object
def add_arc_details(arc, travel_days, total_days, cost):
    print(f"Arc: {arc}, Travel Days: {travel_days}, Total Days: {total_days}, Cost: {cost}")

# Iterate through the dictionary
for key, value in gate_arc_dict.items():
    travel_days, travel_path, total_days, cost = value
    
    # Extract gates from the travel path
    gates = [part for part in travel_path.split('->') if 'G' in part]
    
    # Call Function 1 for each unique gate
    for gate in set(gates):
        node_object = add_gate_node(gate)
    
    # Extract arcs from the travel path
    arc = [(travel_path[i], travel_path[i+1]) for i in range(len(travel_path) - 1)]
    
    # Call Function 2 with arc details
    add_arc_details(arc, travel_days, total_days, cost)
